//Rpol2D operator+(Rpol2D& rhs, Rpol2D& lhs){
    //return {ToPol(ToDec(rhs) + ToDec(lhs))};
//}
//Rpol2D operator-(Rpol2D& rhs, Rpol2D& lhs){
    //return {ToPol(ToDec(rhs) - ToDec(lhs))};
//}
//Rpol2D operator*(Rpol2D& rhs, Rpol2D& lhs){
    //return {ToPol(ToDec(rhs) * ToDec(lhs))};
//}
//Rpol2D operator/(Rpol2D& rhs, Rpol2D& lhs){
    //return {ToPol(ToDec(rhs) / ToDec(lhs))};
//}
//double dot(Rpol2D& rhs, Rpol2D& lhs){
    //Rdec2D temp_rhs, temp_lhs;
    //temp_rhs = ToDec(rhs);
    //temp_lhs = TOdec(lhs);
    //return {temp_rhs.x * temp_lhs.x + temp_rhs.y * temp_lhs.y};
//}
//double norm(Rpol2D& rhs){
    //Rdec2D temp_rhs;
    //temp_rhs = ToDec(rhs);
    //return {sqrt(pow(temp_rhs.x, 2) + pow(temp_rhs.y, 2))};
//}
//bool operator==(Rpol2D& rhs, Rpol2D& lhs){
    //Rdec2D temp_rhs, temp_lhs;
    //temp_rhs = ToDec(rhs);
    //temp_lhs = ToDec(lhs);
    //return {(temp_rhs.x == temp_lhs.x) && (temp_rhs.y == temp_lhs.y)};
//}
//bool operator!=(Rpol2D& rhs, Rpol2D& lhs){
    //Rdec2D temp_rhs, temp_lhs;
    //temp_rhs = ToDec(rhs);
    //temp_lhs = ToDec(lhs);
    //return {!((temp_rhs.x == temp_lhs.x) && (temp_rhs.y == temp_lhs.y))};
//}